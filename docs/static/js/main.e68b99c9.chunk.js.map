{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","value","find","cats","type","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","index","ReactDOM","render","document","getElementById"],"mappings":"mMA+BeA,EA5BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAmBzC,OACE,sBAAMC,SAba,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GACb,OAAIA,EAAMC,MAAK,SAACC,GAAD,OAAUA,IAAST,KACzBO,EAEH,CAAEP,GAAR,mBAAuBO,OAEzBN,EAAc,MAIhB,SACE,uBAAOS,KAAK,OAAOH,MAAOP,EAAYW,SAlBhB,SAACR,GACzBF,EAAcE,EAAES,OAAOL,a,QCWZM,EAfK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAChC,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCPGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACN,mCACTN,EAFe,iDAEiCK,EAFjC,6BACN,oCADM,SAGFE,MAAMP,GAHJ,cAGfQ,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9Bf,GAAIe,EAAIf,GACRC,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIC,cAAN,aAAE,EAAYC,iBAAiBf,QARf,kBAUdW,GAVc,4CAAH,sDCwBLK,EAnBC,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACdtB,mBAAS,CAAE2B,KAAM,GAAIO,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KASxC,OANAC,qBAAU,WACRhB,EAAQC,GAAUgB,MAAK,SAACC,GACtBH,EAAS,CAAET,KAAMY,EAAML,SAAS,SAEjC,CAACZ,IAEGa,EDN2BK,CAAalB,GAAjCS,EADkB,EACxBJ,KAAcO,EADU,EACVA,QACtB,OACE,qCACE,oBAAIhB,UAAU,oCAAd,SAAmDI,IAClDY,GACC,mBAAGhB,UAAU,mCAAb,wBAEF,qBAAKA,UAAU,YAAf,SACGa,EAAOF,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIf,aEOxB0B,MAlBf,SAAsBC,GAAQ,IAAD,EACS1C,mBAAS,CAAC,gBADnB,mBACpB2C,EADoB,KACR5C,EADQ,KAG3B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG4C,EAAWd,KAAI,SAACP,EAAUsB,GACzB,OAAO,cAAC,EAAD,CAAwBtB,SAAUA,GAApBA,Y,MCX/BuB,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.e68b99c9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((value) => {\n        if (value.find((cats) => cats === inputValue)) {\n          return value;\n        }\n        return [inputValue, ...value];\n      });\n      setInputValue(\"\");\n    }\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = { setCategories: PropTypes.func.isRequired };\n\nexport default AddCategory;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nGifGridItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default GifGridItem;\n","export const getGifs = async (category) => {\n  const apiKey = \"mSN3rZJ8JxR7Bt0ibAmeSR8bzTG76KrH\";\n  const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=${apiKey}`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map((img) => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url,\n  }));\n  return gifs;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport GifGridItem from \"./GifGridItem\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      {loading && (\n        <p className=\"animate__animated animate__flash\">Loading...</p>\n      )}\n      <div className=\"card-grid\">\n        {images.map((img) => {\n          return <GifGridItem key={img.id} {...img} />;\n        })}\n      </div>\n    </>\n  );\n};\n\nGifGrid.propTypes = { category: PropTypes.string.isRequired };\n\nexport default GifGrid;\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({ data: [], loading: true });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({ data: imgs, loading: false });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\nfunction GifExpertApp(props) {\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category, index) => {\n          return <GifGrid key={category} category={category} />;\n        })}\n      </ol>\n    </>\n  );\n}\n\nexport default GifExpertApp;\n","import ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}