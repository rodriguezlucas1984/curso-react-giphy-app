{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","value","find","cats","type","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","defaultCategories","categories","index","ReactDOM","render","document","getElementById"],"mappings":"mMA+BeA,EA5BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAmBzC,OACE,sBAAMC,SAba,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GACb,OAAIA,EAAMC,MAAK,SAACC,GAAD,OAAUA,IAAST,KACzBO,EAEH,CAAEP,GAAR,mBAAuBO,OAEzBN,EAAc,MAIhB,SACE,uBAAOS,KAAK,OAAOH,MAAOP,EAAYW,SAlBhB,SAACR,GACzBF,EAAcE,EAAES,OAAOL,a,QCUZM,EAdK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCPGK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACN,mCACTN,EAFe,iDAEiCK,EAFjC,6BACN,oCADM,SAGFE,MAAMP,GAHJ,cAGfQ,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9BC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIE,cAAN,aAAE,EAAYC,iBAAiBhB,QARf,kBAUdW,GAVc,4CAAH,sDCwBLM,EAnBC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACdrB,mBAAS,CAAE0B,KAAM,GAAIQ,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KASxC,OANAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACC,GACtBH,EAAS,CAAEV,KAAMa,EAAML,SAAS,SAEjC,CAACb,IAEGc,EDN2BK,CAAanB,GAAjCU,EADkB,EACxBL,KAAcQ,EADU,EACVA,QACtB,OACE,qCACE,oBAAIjB,UAAU,oCAAd,SAAmDI,IAClDa,GACC,mBAAGjB,UAAU,mCAAb,wBAEF,qBAAKA,UAAU,YAAf,SACGc,EAAOH,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEOxBW,MAlBf,YAAmD,IAAD,IAA1BC,yBAA0B,MAAN,GAAM,IACZ1C,mBAAS0C,GADG,mBACzCC,EADyC,KAC7B5C,EAD6B,KAGhD,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG4C,EAAWf,KAAI,SAACP,EAAUuB,GACzB,OAAO,cAAC,EAAD,CAAwBvB,SAAUA,GAApBA,Y,MCX/BwB,IAASC,OACP,cAAC,EAAD,CAAcJ,kBAAmB,CAAC,iBAClCK,SAASC,eAAe,W","file":"static/js/main.4b5372b4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((value) => {\r\n        if (value.find((cats) => cats === inputValue)) {\r\n          return value;\r\n        }\r\n        return [inputValue, ...value];\r\n      });\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = { setCategories: PropTypes.func.isRequired };\r\n\r\nexport default AddCategory;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nGifGridItem.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GifGridItem;\r\n","export const getGifs = async (category) => {\r\n  const apiKey = \"mSN3rZJ8JxR7Bt0ibAmeSR8bzTG76KrH\";\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=${apiKey}`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((img) => ({\r\n    id: img.id,\r\n    title: img.title,\r\n    url: img.images?.downsized_medium.url,\r\n  }));\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport GifGridItem from \"./GifGridItem\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading && (\r\n        <p className=\"animate__animated animate__flash\">Loading...</p>\r\n      )}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => {\r\n          return <GifGridItem key={img.id} {...img} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nGifGrid.propTypes = { category: PropTypes.string.isRequired };\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({ data: [], loading: true });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({ data: imgs, loading: false });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nfunction GifExpertApp({ defaultCategories = [] }) {\r\n  const [categories, setCategories] = useState(defaultCategories);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category, index) => {\r\n          return <GifGrid key={category} category={category} />;\r\n        })}\r\n      </ol>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifExpertApp;\r\n","import ReactDOM from \"react-dom\";\r\nimport GifExpertApp from \"./GifExpertApp\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <GifExpertApp defaultCategories={[\"Dragon Ball\"]} />,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}